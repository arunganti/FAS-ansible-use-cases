---
- name: "Disabling a pool member"
  hosts: lb
  gather_facts: false
  connection: local

  tasks:
  - name: Setup provider
    set_fact:
     provider:
      server: "{{private_ip}}"
      user: "{{ansible_user}}"
      password: "{{ansible_ssh_pass}}"
      server_port: "{{F5_Admin_Port}}"
      validate_certs: "no"

  - name: Create Pool with Members
    bigip_pool:
      provider: "{{provider}}"
      state: present
      name: "{{ F5_VIP_Name }}_pool"
      lb_method: round-robin
      monitors:
        - http

  - name: Add Pool Members
    bigip_pool_member:
      provider: "{{provider}}"
      state: present
      pool: "{{ F5_VIP_Name }}_pool"
      name: "{{hostvars[item].inventory_hostname}}"
      host: "{{hostvars[item].private_ip}}"
      port: "80"
    loop: "{{ groups['webservers'] }}"

  - name: Query BIG-IP facts
    bigip_device_facts:
      provider: "{{provider}}"
      gather_subset:
       - ltm-pools
    register: bigip_facts

  - name: Display Pools available
    debug: "msg={{item.name}}"
    loop: "{{bigip_facts.ltm_pools}}"
    loop_control:
      label: "{{item.name}}"

  - name: Store pool name in a variable
    set_fact:
     pool_name: "{{item.name}}"
    loop: "{{bigip_facts.ltm_pools}}"
    no_log: true

  - pause:
      prompt: "enter name of pool to edit"
    register: pool_name_selection
    when: pool_action|lower == "disable" or pool_action|lower == "enable"

  - debug:
      msg: {{bigip_facts.ltm.pools}}


  - name: "Show members belonging to pool {{pool_name_selection}}"
    debug: "msg={{item}}"
    loop: "{{bigip_facts.ltm_pools | json_query(query_string)}}"
    vars:
     query_string: "[?name=='{{pool_name}}'].members['{{pool_name_selection}}'].{name: name, address: address}" #.name[]"

  - pause:
      prompt: "To disable/enable a particular member enter member with format member_name:port \nTo disable/enable all members of the pool enter 'all'"
    register: member_name
    when: pool_action|lower == "disable" or pool_action|lower == "enable"

  - name: Disable ALL pool members
    bigip_pool_member:
      provider: "{{provider}}"
      state: "enabled"
      name: "{{item.split(':')[0]}}"
      pool: "{{pool_name_selection}}"
      port: "{{item.split(':')[1]}}"
      host: "{{hostvars[item.split(':')[0]].ansible_host}}"
    loop: "{{bigip_facts.ltm_pools | json_query(query_string)}}"
    vars:
     query_string: "[?name=='{{pool_name_selection}}'].members[*].name[]"
    when: '"all" in member_name.user_input and pool_action|lower  == "disable"'

  - name: Disable pool member {{member_name.user_input}}
    bigip_pool_member:
      provider: "{{provider}}"
      state: "forced_offline"
      name: "{{member_name.user_input.split(':')[0]}}"
      pool: "{{pool_name_selection}}"
      port: "{{member_name.user_input.split(':')[1]}}"
      host: "{{hostvars[member_name.user_input.split(':')[0]].ansible_host}}"
    when: '"all" not in member_name.user_input and pool_action|lower  == "disable"'


  - name: Enable ALL pool members
    bigip_pool_member:
      provider: "{{provider}}"
      state: "enabled"
      name: "{{item.split(':')[0]}}"
      pool: "{{pool_name_selection}}"
      port: "{{item.split(':')[1]}}"
      host: "{{hostvars[item.split(':')[0]].ansible_host}}"
    loop: "{{bigip_facts.ltm_pools | json_query(query_string)}}"
    vars:
     query_string: "[?name=='{{pool_name_selection}}'].members[*].name[]"
    when: '"all" in member_name.user_input and pool_action|lower  == "enable"'

  - name: Enable pool member {{member_name.user_input}}
    bigip_pool_member:
      provider: "{{provider}}"
      state: "enabled"
      name: "{{member_name.user_input.split(':')[0]}}"
      pool: "{{pool_name_selection}}"
      port: "{{member_name.user_input.split(':')[1]}}"
      host: "{{hostvars[member_name.user_input.split(':')[0]].ansible_host}}"
    when: '"all" not in member_name.user_input and pool_action|lower  == "enable"'
